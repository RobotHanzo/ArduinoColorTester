/* tslint:disable */
/* eslint-disable */
/**
 * ColorDetector
 * An easy to use API aiming to simplify the process of controlling a self a made color detecting device
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BoardInfo
 */
export interface BoardInfo {
    /**
     * In milliseconds
     * @type {number}
     * @memberof BoardInfo
     */
    'uptime'?: number;
    /**
     * In Celsius
     * @type {number}
     * @memberof BoardInfo
     */
    'temperature': number;
}
/**
 * A task that has ended
 * @export
 * @interface CompletedTask
 */
export interface CompletedTask {
    /**
     * 
     * @type {number}
     * @memberof CompletedTask
     */
    'taskId': number;
    /**
     * 
     * @type {any}
     * @memberof CompletedTask
     */
    'details'?: any;
    /**
     * 
     * @type {any}
     * @memberof CompletedTask
     */
    'result'?: any;
}
/**
 * Basic information about the current status of ESP32, Arduino UNO and the sensors
 * @export
 * @interface DebugInfo
 */
export interface DebugInfo {
    /**
     * 
     * @type {LEDInfo}
     * @memberof DebugInfo
     */
    'brightness': LEDInfo;
    /**
     * 
     * @type {number}
     * @memberof DebugInfo
     */
    'photoresistorReading': number;
    /**
     * 
     * @type {BoardInfo}
     * @memberof DebugInfo
     */
    'esp32': BoardInfo;
    /**
     * 
     * @type {BoardInfo}
     * @memberof DebugInfo
     */
    'arduino': BoardInfo;
}
/**
 * 
 * @export
 * @interface LEDInfo
 */
export interface LEDInfo {
    /**
     * Blue
     * @type {number}
     * @memberof LEDInfo
     */
    'r'?: number;
    /**
     * Green
     * @type {number}
     * @memberof LEDInfo
     */
    'g'?: number;
    /**
     * Blue
     * @type {number}
     * @memberof LEDInfo
     */
    'b'?: number;
}
/**
 * A scan profile containing the settings of a scan
 * @export
 * @interface ScanProfile
 */
export interface ScanProfile {
    /**
     * 
     * @type {number}
     * @memberof ScanProfile
     */
    'brightness': number;
    /**
     * 
     * @type {number}
     * @memberof ScanProfile
     */
    'scanTimes': number;
    /**
     * 
     * @type {number}
     * @memberof ScanProfile
     */
    'scanInterval': number;
}
/**
 * The result of a scan
 * @export
 * @interface ScanResult
 */
export interface ScanResult {
    /**
     * 
     * @type {ScanProfile}
     * @memberof ScanResult
     */
    'profile': ScanProfile;
    /**
     * The respective values represent the signals received from analog reading photoresistor under shining of the indicated color LED, varying from 0 to 1023
     * @type {Array<any>}
     * @memberof ScanResult
     */
    'results': Array<any>;
    /**
     * 
     * @type {ScanResultBrief}
     * @memberof ScanResult
     */
    'brief': ScanResultBrief;
}
/**
 * 
 * @export
 * @interface ScanResultBrief
 */
export interface ScanResultBrief {
    /**
     * 
     * @type {number}
     * @memberof ScanResultBrief
     */
    'median'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScanResultBrief
     */
    'average'?: number;
}
/**
 * The respective values represent the signals received from analog reading photoresistor under shining of the indicated color LED, varying from 0 to 1023
 * @export
 * @interface ScanResultData
 */
export interface ScanResultData {
    /**
     * Red
     * @type {number}
     * @memberof ScanResultData
     */
    'r': number;
    /**
     * Green
     * @type {number}
     * @memberof ScanResultData
     */
    'g': number;
    /**
     * Blue
     * @type {number}
     * @memberof ScanResultData
     */
    'b': number;
}
/**
 * A task that has not yet ended
 * @export
 * @interface ScheduledTask
 */
export interface ScheduledTask {
    /**
     * 
     * @type {number}
     * @memberof ScheduledTask
     */
    'taskId': number;
    /**
     * 0 - Queued 1 - Running 2 - Finalizing (The device can be moved safely)
     * @type {number}
     * @memberof ScheduledTask
     */
    'statusCode': number;
    /**
     * 
     * @type {any}
     * @memberof ScheduledTask
     */
    'details'?: any;
    /**
     * In milliseconds This will be -1 if the task has already began.
     * @type {number}
     * @memberof ScheduledTask
     */
    'estimatedBeginIn': number;
    /**
     * In milliseconds. This will be -1 if the task hasn\'t started yet
     * @type {number}
     * @memberof ScheduledTask
     */
    'elapsed': number;
    /**
     * In milliseconds
     * @type {number}
     * @memberof ScheduledTask
     */
    'estimatedCompletionIn': number;
}
/**
 * Used for debugging to directly send serial messages to the arduino
 * @export
 * @interface SerialEvent
 */
export interface SerialEvent {
    /**
     * 
     * @type {number}
     * @memberof SerialEvent
     */
    'eventCode'?: number;
    /**
     * 
     * @type {SerialEventData}
     * @memberof SerialEvent
     */
    'data'?: SerialEventData;
}
/**
 * 
 * @export
 * @interface SerialEventData
 */
export interface SerialEventData {
    /**
     * 
     * @type {number}
     * @memberof SerialEventData
     */
    'eventCode'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new instance of a `ScheduledTask`.
         * @summary Create a ScheduledTask
         * @param {ScheduledTask} scheduledTask A new &#x60;ScheduledTask&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduledTask: async (scheduledTask: ScheduledTask, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduledTask' is not null or undefined
            assertParamExists('createScheduledTask', 'scheduledTask', scheduledTask)
            const localVarPath = `/tasks/scheduled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduledTask, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LEDInfo} lEDInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debugLedPost: async (lEDInfo: LEDInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lEDInfo' is not null or undefined
            assertParamExists('debugLedPost', 'lEDInfo', lEDInfo)
            const localVarPath = `/debug/led`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lEDInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a completed task
         * @summary Deletes a completed task
         * @param {string} taskId A unique identifier for a &#x60;CompletedTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompletedTask: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteCompletedTask', 'taskId', taskId)
            const localVarPath = `/tasks/completed/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing `DebugInfo`.
         * @summary Delete a DebugInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDebugInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/debug/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels / Aborts an existing `ScheduledTask`.
         * @summary Cancel / Abort a ScheduledTask
         * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduledTask: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteScheduledTask', 'taskId', taskId)
            const localVarPath = `/tasks/scheduled/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `CompletedTask`.
         * @summary Get a CompletedTask
         * @param {string} taskId A unique identifier for a &#x60;CompletedTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedTask: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getCompletedTask', 'taskId', taskId)
            const localVarPath = `/tasks/completed/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all `CompletedTask` entities.
         * @summary List All CompletedTasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedTasks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks/completed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `DebugInfo`.
         * @summary Get a DebugInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDebugInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/debug/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the details of a single instance of a `ScheduledTask`.
         * @summary Get a ScheduledTask
         * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTask: async (taskId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getScheduledTask', 'taskId', taskId)
            const localVarPath = `/tasks/scheduled/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of all `ScheduledTask` entities.
         * @summary List All ScheduledTasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTasks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks/scheduled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SerialEvent} serialEvent Whatever you put in the body will be sent to the arduino
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSerialMessage: async (serialEvent: SerialEvent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serialEvent' is not null or undefined
            assertParamExists('sendSerialMessage', 'serialEvent', serialEvent)
            const localVarPath = `/debug/serial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serialEvent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing `DebugInfo`.
         * @summary Update a DebugInfo
         * @param {DebugInfo} debugInfo Updated &#x60;DebugInfo&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDebugInfo: async (debugInfo: DebugInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'debugInfo' is not null or undefined
            assertParamExists('updateDebugInfo', 'debugInfo', debugInfo)
            const localVarPath = `/debug/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(debugInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing `ScheduledTask`.
         * @summary Update a ScheduledTask
         * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
         * @param {ScheduledTask} scheduledTask Updated &#x60;ScheduledTask&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduledTask: async (taskId: string, scheduledTask: ScheduledTask, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('updateScheduledTask', 'taskId', taskId)
            // verify required parameter 'scheduledTask' is not null or undefined
            assertParamExists('updateScheduledTask', 'scheduledTask', scheduledTask)
            const localVarPath = `/tasks/scheduled/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduledTask, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new instance of a `ScheduledTask`.
         * @summary Create a ScheduledTask
         * @param {ScheduledTask} scheduledTask A new &#x60;ScheduledTask&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScheduledTask(scheduledTask: ScheduledTask, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScheduledTask(scheduledTask, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LEDInfo} lEDInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debugLedPost(lEDInfo: LEDInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.debugLedPost(lEDInfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a completed task
         * @summary Deletes a completed task
         * @param {string} taskId A unique identifier for a &#x60;CompletedTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompletedTask(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompletedTask(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an existing `DebugInfo`.
         * @summary Delete a DebugInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDebugInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDebugInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancels / Aborts an existing `ScheduledTask`.
         * @summary Cancel / Abort a ScheduledTask
         * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduledTask(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScheduledTask(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the details of a single instance of a `CompletedTask`.
         * @summary Get a CompletedTask
         * @param {string} taskId A unique identifier for a &#x60;CompletedTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompletedTask(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompletedTask(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of all `CompletedTask` entities.
         * @summary List All CompletedTasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompletedTasks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompletedTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompletedTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the details of a single instance of a `DebugInfo`.
         * @summary Get a DebugInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDebugInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebugInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDebugInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the details of a single instance of a `ScheduledTask`.
         * @summary Get a ScheduledTask
         * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduledTask(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduledTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduledTask(taskId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of all `ScheduledTask` entities.
         * @summary List All ScheduledTasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduledTasks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduledTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduledTasks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SerialEvent} serialEvent Whatever you put in the body will be sent to the arduino
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendSerialMessage(serialEvent: SerialEvent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendSerialMessage(serialEvent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an existing `DebugInfo`.
         * @summary Update a DebugInfo
         * @param {DebugInfo} debugInfo Updated &#x60;DebugInfo&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDebugInfo(debugInfo: DebugInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDebugInfo(debugInfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an existing `ScheduledTask`.
         * @summary Update a ScheduledTask
         * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
         * @param {ScheduledTask} scheduledTask Updated &#x60;ScheduledTask&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduledTask(taskId: string, scheduledTask: ScheduledTask, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduledTask(taskId, scheduledTask, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Creates a new instance of a `ScheduledTask`.
         * @summary Create a ScheduledTask
         * @param {ScheduledTask} scheduledTask A new &#x60;ScheduledTask&#x60; to be created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduledTask(scheduledTask: ScheduledTask, options?: any): AxiosPromise<void> {
            return localVarFp.createScheduledTask(scheduledTask, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LEDInfo} lEDInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debugLedPost(lEDInfo: LEDInfo, options?: any): AxiosPromise<void> {
            return localVarFp.debugLedPost(lEDInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a completed task
         * @summary Deletes a completed task
         * @param {string} taskId A unique identifier for a &#x60;CompletedTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompletedTask(taskId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteCompletedTask(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing `DebugInfo`.
         * @summary Delete a DebugInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDebugInfo(options?: any): AxiosPromise<void> {
            return localVarFp.deleteDebugInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels / Aborts an existing `ScheduledTask`.
         * @summary Cancel / Abort a ScheduledTask
         * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduledTask(taskId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteScheduledTask(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single instance of a `CompletedTask`.
         * @summary Get a CompletedTask
         * @param {string} taskId A unique identifier for a &#x60;CompletedTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedTask(taskId: string, options?: any): AxiosPromise<void> {
            return localVarFp.getCompletedTask(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all `CompletedTask` entities.
         * @summary List All CompletedTasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedTasks(options?: any): AxiosPromise<Array<CompletedTask>> {
            return localVarFp.getCompletedTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single instance of a `DebugInfo`.
         * @summary Get a DebugInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDebugInfo(options?: any): AxiosPromise<DebugInfo> {
            return localVarFp.getDebugInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the details of a single instance of a `ScheduledTask`.
         * @summary Get a ScheduledTask
         * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTask(taskId: string, options?: any): AxiosPromise<ScheduledTask> {
            return localVarFp.getScheduledTask(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of all `ScheduledTask` entities.
         * @summary List All ScheduledTasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledTasks(options?: any): AxiosPromise<Array<ScheduledTask>> {
            return localVarFp.getScheduledTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SerialEvent} serialEvent Whatever you put in the body will be sent to the arduino
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendSerialMessage(serialEvent: SerialEvent, options?: any): AxiosPromise<void> {
            return localVarFp.sendSerialMessage(serialEvent, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing `DebugInfo`.
         * @summary Update a DebugInfo
         * @param {DebugInfo} debugInfo Updated &#x60;DebugInfo&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDebugInfo(debugInfo: DebugInfo, options?: any): AxiosPromise<void> {
            return localVarFp.updateDebugInfo(debugInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing `ScheduledTask`.
         * @summary Update a ScheduledTask
         * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
         * @param {ScheduledTask} scheduledTask Updated &#x60;ScheduledTask&#x60; information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduledTask(taskId: string, scheduledTask: ScheduledTask, options?: any): AxiosPromise<void> {
            return localVarFp.updateScheduledTask(taskId, scheduledTask, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new instance of a `ScheduledTask`.
     * @summary Create a ScheduledTask
     * @param {ScheduledTask} scheduledTask A new &#x60;ScheduledTask&#x60; to be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createScheduledTask(scheduledTask: ScheduledTask, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createScheduledTask(scheduledTask, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LEDInfo} lEDInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public debugLedPost(lEDInfo: LEDInfo, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).debugLedPost(lEDInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a completed task
     * @summary Deletes a completed task
     * @param {string} taskId A unique identifier for a &#x60;CompletedTask&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCompletedTask(taskId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCompletedTask(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing `DebugInfo`.
     * @summary Delete a DebugInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDebugInfo(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteDebugInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels / Aborts an existing `ScheduledTask`.
     * @summary Cancel / Abort a ScheduledTask
     * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteScheduledTask(taskId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteScheduledTask(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a single instance of a `CompletedTask`.
     * @summary Get a CompletedTask
     * @param {string} taskId A unique identifier for a &#x60;CompletedTask&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompletedTask(taskId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompletedTask(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all `CompletedTask` entities.
     * @summary List All CompletedTasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCompletedTasks(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCompletedTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a single instance of a `DebugInfo`.
     * @summary Get a DebugInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDebugInfo(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getDebugInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the details of a single instance of a `ScheduledTask`.
     * @summary Get a ScheduledTask
     * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScheduledTask(taskId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScheduledTask(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of all `ScheduledTask` entities.
     * @summary List All ScheduledTasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScheduledTasks(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScheduledTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SerialEvent} serialEvent Whatever you put in the body will be sent to the arduino
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendSerialMessage(serialEvent: SerialEvent, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sendSerialMessage(serialEvent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing `DebugInfo`.
     * @summary Update a DebugInfo
     * @param {DebugInfo} debugInfo Updated &#x60;DebugInfo&#x60; information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateDebugInfo(debugInfo: DebugInfo, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateDebugInfo(debugInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing `ScheduledTask`.
     * @summary Update a ScheduledTask
     * @param {string} taskId A unique identifier for a &#x60;ScheduledTask&#x60;.
     * @param {ScheduledTask} scheduledTask Updated &#x60;ScheduledTask&#x60; information.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateScheduledTask(taskId: string, scheduledTask: ScheduledTask, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateScheduledTask(taskId, scheduledTask, options).then((request) => request(this.axios, this.basePath));
    }
}


